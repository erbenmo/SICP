(define (cond-clauses exp) (cdr exp))

(define (let->combination exp)
  (expand-let (cond-clauses exp)))

(define (expand-let clauses)
  (let ((assignment (car clauses))
	(body (cadr clauses)))
    (let ((func make-lambda (left assignment) body))
      (cons func (right assignment)))))

(define (left clauses)
  (if (null? clauses)
      `()
      (cons (car (car clauses)) (left (cdr clauses)))))

(define (right clauses)
  (if (null? clauses)
      `()
      (cons (cadr (car clauses)) (right (cdr clauses)))))

(define (eval exp env)
  (cond ((self-evaluating? exp) exp)
	((variable? exp) (lookup-variable-value exp env))
	((quoted? exp) (text-of-quotation exp))
	((assignment? exp) (eval-assignment exp env))
	((definition? exp) (eval-definition exp env))
	((if? exp) (eval-if exp env))
	((lambda? exp)
	 (make-procedure (lambda-parameters exp)
			 (lambda-body exp)
			 env))
	((left? exp) (let->combination exp env))
	((begin? exp)
	 (eval-sequence (begin-actions exp) env))
	((cond? exp) (eval (cond->if exp) env))
	((application? exp)
	 (apply (eval (operator exp) env)
		(list-of-values (operands exp) env)))
	(else
	 (error "Unknown expression type -- EVAL" exp))))

(define (let? exp)
  (tagged-list? exp 'let))