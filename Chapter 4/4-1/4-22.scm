(define (analyze exp env)
  (cond ((self-evaluating? exp)
	 (analyze-self-evaluating exp))
	((quoted? exp) (analyze-quoted exp))
	((variable? exp) (analyze-variable  exp))
	((assignment? exp) (analyze-assignment exp))
	((definition? exp) (analyze-definition exp))
	((if? exp) (analyze-if exp))
	((lambda? exp) (analyze-lambda exp))
	((let? exp) (analyze-let exp))
	((begin? exp)
	 (analyze-sequence (begin-actions exp)))
	((cond? exp) (analye (cond->if exp)))
	((application? exp) (analyze-application exp))
	(else
	 (error "Unknown expression type -- ANALYZE" exp))))

(define (analyze-let exp)
  (let ((clauses (cdr exp)))
    (let ((assignment (car clauses))
	  (body (cadr clauses)))
      (let ((func (make-lambda (map car assignment) body)))
	(lambda () (analyze (cons func (map cadr assignment))))))))