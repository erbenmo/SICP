(define (miller-rabin-expmod base exp m)
  (define (no-fool-expmod target)
    (define (no-fool-expmod-helper target square-mod)
      (if (and (= square-mod 1)
	       (not (= target 1))
	       (not (= target (- m 1))))
	  0
	  square-mod))
    (no-fool-expmod-helper target (remainder (square target) m)))
  (cond ((= exp 0) 1)
	((even? exp)
	 (no-fool-expmod (miller-rabin-expmod base (/ exp 2) m)))
	(else
	 (remainder (* base (miller-rabin-expmod base (- exp 1) m))
		    m))))

(define (miller-rabin-test n)
  (define (try-it a)
    (= (miller-rabin-expmod a (- n 1) n) 1))
  (try-it (+ 1 (random (- n 1)))))

(define (no-fool-fast-prime? n times)
  (cond ((= times 0) true)
	((miller-rabin-test n) (no-fool-fast-prime? n (- times 1)))
	(else false)))